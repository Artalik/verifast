#ifndef MULTISET_H
#define MULTISET_H

#include "vfarray.gh"

inductive multiset<t> = mk_multiset (array(t, nat));

fixpoint nat multiset_select<t>(multiset<t> m, t i) {
  switch(m) {
    case mk_multiset(a): return select(a, i);
  }
}

fixpoint multiset<t> empty_multiset<t>() {
  return (mk_multiset(constant_array<t,nat>(zero)));
}

fixpoint multiset<t> multiset_add<t>(multiset<t> m, t i) {
  switch(m) {
    case mk_multiset(a):
      return mk_multiset(store(a, i, succ(select(a, i))));
  }
}

lemma t multiset_ext<t>(multiset<t> m1, multiset<t> m2)
  requires m1 != m2;
  ensures multiset_select(m1, result) != multiset_select(m2, result);
{ 
   switch (m1) {
     case mk_multiset(a1): {
       switch (m2) {
         case mk_multiset(a2): {
           return array_extensionality(a1, a2);
         }       
       }     
     }
   }
}

/*
lemma_auto (multiset_get(empty_multiset(), i)) void get_empty(int i)
  requires true;
  ensures multiset_get(empty_multiset(), i) == O;
{ }
*/

lemma_auto (multiset_select(multiset_add(m, i), j)) void select_add<t>(multiset<t> m, t i, t j)
  requires true;
  ensures multiset_select(multiset_add(m, i), j) == ((i == j) ? succ(multiset_select(m, i)) : multiset_select(m ,j));
{ 
   switch (m) {
     case mk_multiset(a): {}}
}

fixpoint multiset<int> array_multiset(int b, nat n, array(int,int) arr) {
  switch(n) {
    case zero: return empty_multiset();
    case succ(p): return multiset_add(array_multiset(b+1, p, arr), select(arr, b));
  }
}

predicate same_multiset(array(int,int) a1, array(int,int) a2, int b, int e) =
  array_multiset(b, nat_of_int(e-b), a1) == array_multiset(b, nat_of_int(e-b), a2);

lemma void note(bool b)
requires b == true;
ensures b == true;
{}

lemma void close_same_multiset(array(int, int) a1, array(int, int) a2, int b, int e)
requires same_multiset(a1, a2, b, e) &*& select(a1, b-1) == select(a2, b-1) &*& b <= e;
ensures same_multiset(a1, a2, b-1, e);
{
  open same_multiset(a1, a2, b, e);
  nat n = nat_of_int(e-b);
  note(array_multiset(b-1, nat_of_int(e-(b-1)), a1) == array_multiset(b-1, succ(n), a1));
  note(array_multiset(b-1, nat_of_int(e-(b-1)), a2) == array_multiset(b-1, succ(n), a2));
  close same_multiset(a1, a2, b-1, e);
}

  
lemma void multiset_add_commutes<a>(multiset<a> M, a x, a y)
requires true;
ensures multiset_add(multiset_add(M, y), x) == multiset_add(multiset_add(M, x), y);
{
  multiset<a> My = multiset_add(M, y);
  multiset<a> Mx = multiset_add(M, x);
  multiset<a> Myx = multiset_add(My, x);
  multiset<a> Mxy = multiset_add(Mx, y);
  if (Myx != Mxy) {
    a z = multiset_ext(Myx, Mxy);
  }
}

lemma void regular_multiset_add<a>(multiset<a> MA, multiset<a> MB, a x)
   requires multiset_add(MA,x) == multiset_add(MB,x);
   ensures MA == MB;
   {
     if( MA != MB){
       a t = multiset_ext(MA,MB);
       
       	 select_add(MA, x, t);
       	 select_add(MB, x, t);
       if (x == t){
         inj_S(multiset_select(MA,x),multiset_select(MB,x));
       }
         
     }
   }

lemma multiset<a> multiset_add_join<a>(multiset<a> m1, multiset<a> m2, a x, a y)
requires multiset_add(m1, x) == multiset_add(m2, y) &*& x != y;
ensures m1 == multiset_add(result, y) &*& m2 == multiset_add(result, x);
{
  switch(multiset_select(m1, y)) {
    case zero: {
      note (zero == multiset_select(multiset_add(m1, x), y));
      assert false;
    }
    case succ(p): {
      switch(m1) {
        case mk_multiset(a):
          multiset<a> res = mk_multiset(store(a, y, p));
          assert m1 == multiset_add(res, y);
          multiset_add_commutes(res, x, y);
          regular_multiset_add(m2, multiset_add(res, x), y);
          return res;
      }
    }
  }

}

lemma void array_multiset_right(array(int, int) A, int b, int e, nat n)
requires int_diff(b, e, n) == true &*& b <= e;
ensures array_multiset(b, succ(n), A) == multiset_add(array_multiset(b, n, A), select(A, e));
{
  switch(n) {
    case zero:
    case succ(p): {
      array_multiset_right(A, b+1, e, p);
      multiset_add_commutes(array_multiset(b+1, p, A), select(A, e), select(A, b));
    }
  }
}


lemma void same_multiset_refl (array(int,int) start, int b, int e)
  requires true;
  ensures same_multiset(start, start, b, e);
{
   if (b >= e) {
     close same_multiset(start, start, b, e);
   } else {
     int i = e;
     close same_multiset(start, start, i, e);
     for (; i > b; i--)
       invariant b <= i &*& i <= e &*& same_multiset(start, start, i, e);
       decreases (i-b);
       {
          open same_multiset(start, start, i, e);
          close same_multiset(start, start, i-1, e);
       }
   }
}

lemma void same_multiset_sym(array(int, int) start, array(int, int) end, int b, int e)
requires same_multiset(start, end, b, e);
ensures same_multiset(end, start, b, e);
{
  open same_multiset(start, end, b, e);
  close same_multiset(end, start, b, e);
}

lemma void same_multiset_trans(array(int, int) start, array(int, int) middle, array(int, int) end, int b, int e)
  requires same_multiset(start, middle, b, e) &*& same_multiset(middle, end, b, e);
  ensures same_multiset(start, end, b, e);
{ 
  open same_multiset(middle, end, b, e);
  open same_multiset(start, middle, b, e);
  close same_multiset(start, end, b, e);
}


lemma void same_multiset_add_at_end(array(int, int) start, array(int, int) end, int b, int e)
  requires same_multiset(start, end, b, e) &*& select(start, e) == select(end, e) &*& b <= e;
  ensures same_multiset(start, end, b, e+1);
{
  open same_multiset(start,end,b,e);
  nat n = int_diff_always(b, e);
  int_diff_le(b, e, n);
  array_multiset_right(start, b, e, n);
  array_multiset_right(end, b, e, n);
  close same_multiset(start, end, b, e+1);
}

lemma int array_multiset_assoc(array(int, int) a, int b, int e, int v, nat l)
requires multiset_select(array_multiset(b, l, a), v) != zero &*& int_diff(b, e, l) == true;
ensures select(a, result) == v &*& b <= result &*& result < e;
{
   switch(l) {
     case zero: {
      open array_multiset(b, e, a, m);
      assert false;
     }
     case succ(p): {
        if (select(a, b) == v) {
          return b;
        } else {
          return array_multiset_assoc(a, b+1, e, v, p);
        }
     }
   }
}

lemma void array_multiset_select(array(int, int) a, int b, int e, int i, nat l)
requires b <= i &*& i < e &*& int_diff(b, e, l) == true;
ensures multiset_select(array_multiset(b, l, a), select(a, i)) != zero;
{
   switch(l)
   {
      case zero: { 
        open int_diff(b, e, l);
        assert false;
      }
      case succ(p): {
        if (b != i) {
           array_multiset_select(a, b+1, e, i, p);
        }
      }
   }
}

lemma int same_multiset_assoc(array(int, int) start, array(int, int) end, int b, int e, int i)
  requires same_multiset(start, end, b, e) &*& b <= i &*& i < e;
  ensures same_multiset(start, end, b, e) &*& select(start, i) == select(end, result) &*& b <= result &*& result < e;
{
   open same_multiset(start, end, b, e);
   nat l = int_diff_always(b, e);
   int_diff_le(b, e, l);
   array_multiset_select(start, b, e, i, l);
   int j = array_multiset_assoc(end, b, e, select(start, i), l);
   close same_multiset(start, end, b, e);
   return j;
}

lemma multiset<int> multiset_select_in(int b, int e, nat n, array(int, int) start, int k)
  requires int_diff(b, e, n) == true &*& b <= k &*& k < e;
  ensures array_multiset(b, n, start) == multiset_add(result, select(start, k));
{
  switch(n) {
    case zero: assert false;
    case succ(p): {
      if (b == k) {
        return array_multiset(b+1, p, start);
      } else {
        multiset<int> m = multiset_select_in(b+1, e, p, start, k);
        multiset_add_commutes(m, select(start, k), select(start, b));
        return multiset_add(m, select(start, b));
      }
    }
  }
}

lemma void same_multiset_store_out_left(int b, int e, nat n, array(int, int) start, int k, int v)
  requires k < b &*& int_diff(b, e, n) == true &*& b <= e;
  ensures same_multiset(start, store(start, k, v), b, e);
{
  switch(n) {
    case zero: close same_multiset(start, store(start, k, v), b, e);
    case succ(p): {
      same_multiset_store_out_left(b+1, e, p, start, k, v);
      close_same_multiset(start, store(start, k, v), b+1, e);
    }
  }
}

lemma void same_multiset_store_in(int b, int e, nat n, array(int, int) start, multiset<int> m, int k, int v)
  requires array_multiset(b, n, start) == multiset_add(m, select(start, k)) &*& int_diff(b, e, n) == true &*& b <= k &*& k < e;
  ensures array_multiset(b, n, store(start, k, v)) == multiset_add(m, v);
{
  switch(n) {
    case zero: assert false;
    case succ(p): {
      if (b == k) {
        same_multiset_store_out_left(b+1, e, p, start, k, v);
        int_diff_le(b+1, e, p);
        open same_multiset(start, store(start, k, v), b+1, e);
        regular_multiset_add(m, array_multiset(b+1, p, store(start, k, v)), select(start, k));
      } else {
        if(select(start, b) == select(start, k)) {
          multiset<int> m2 = multiset_select_in(b+1, e, p, start, k); // AM(b+1, p, start) == m2 + {start[k]}
          regular_multiset_add(array_multiset(b+1, p, start), m, select(start, b)); // AM(b+1, p, start) == m
          same_multiset_store_in(b+1, e, p, start, m2, k, v); // AM(b+1, p, end) == m2 + {v}
          multiset_add_commutes(m2, select(start, k), v);
        } else {
          multiset<int> m2 = multiset_add_join(array_multiset(b+1, p, start), m, select(start, b), select(start, k)); // AM(b+1, p, start) == m2 + {start[k]}, m == m2 + {start[b]}
          same_multiset_store_in(b+1, e, p, start, m2, k, v); // AM(b+1, p, end) == m2 + {v}
          multiset_add_commutes(m2, select(start, b), v);
        }
      }
    }
  }
}