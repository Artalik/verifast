#ifndef VFARRAY2_H
#define VFARRAY2_H

inductive nat = O | S(nat);

fixpoint u get<t,u> (array(t,u) arr, t x);
fixpoint array(t, u) set<t, u> (array(t, u) arr, t x, u y);

fixpoint array(t, u) constant_array<t,u> (u v);


lemma_auto (get(constant_array<t,u>(v),i)) void constant_get<t,u> (u v, t i)
  requires true;
  ensures get (constant_array<t,u>(v), i) == v;
  { assume (false); }

lemma t array_ext<t,u>(array(t,u) A, array(t,u) B)
  requires A != B;
  ensures get(A, result) != get(B, result);
{ assume(false); }

	 		 		 
lemma_auto (get(set(arr, x, y), z)) void get_set<t,u> (array(t,u) arr, t x, u y, t z)
    requires true;
    ensures get (set(arr, x, y), z) == ((x == z) ? y : get (arr, z));
{ assume(false); }
/*
fixpoint int get<t,u> (array(int,int) arr, int x);
fixpoint array(t, u) set<t, u> (fixpoint(t, u) arr, t x, u y);
*/

// good 
inductive a<t> = a_intro (array(t, int));
inductive a' = a_intro' (array(a<int>, int));

//bad
//inductive a'' = a_intro'' (array(a'', int));


/*
fixpoint bool delta(a x) {
  switch(x) {
    case a_intro(f): return !(get<a,bool>(f, x));
    case dummy: return true;
  }
}
  
fixpoint a delta2() { return a_intro(delta); }

fixpoint bool omega () { return delta(delta2()); }

lemma void liar ()
  requires true;
  ensures omega == ! omega;
  { return; }

*/


predicate pointsto (int* a; int b) = integer(a, b);


predicate array_list_model<key, val> (key* a, int b, int e, predicate(key*, int; val) pto; list<pair<int,val> > m) =
  (b >= e) ? m == nil :
     (array_list_model<key, val>(a, b+1, e, pto, ?tl) &*&
       pto(a, b, ?hd) &*&
      m == cons(pair(b, hd),tl));

predicate int_pto(int* a, int b; int v) = integer(a + b, v);

predicate array_forall (int* a, int b, int e, fixpoint(pair<int,int>, bool) p) =
  array_list_model<int, int>(a, b, e, int_pto, ?m) &*&
    forall(m, p) == true;

fixpoint bool array_models (array(int,int) arr, pair<int, int> iv) {
  switch(iv) {
    case pair<int,int>(i, v): return v == get<int,int>(arr, i);
  }
}

predicate array_model (int* a, int b, int e, array(int,int) arr) =
  array_forall(a, b, e, (array_models)(arr));
  
lemma void empty_array(int* a, int i, array(int, int) arr)
requires true;
ensures array_model(a, i, i, arr);
{
  close array_list_model<int,int>(a, i, i, int_pto, nil);
  close array_forall(a, i, i, (array_models)(arr));
  close array_model(a, i, i, arr);
}

lemma void array_model_init(int* a, int length)
  requires chars((void*)a, length*sizeof(int), _) &*& length > 0;
  ensures array_model(a, 0, length, _);
{ assume(false); }

lemma void array_model_get_unfold(int* a, int b, int e, array(int,int) arr, int i)
  requires array_model(a, b, e, arr) &*& b <= i &*& i < e;
  ensures array_model(a, b, i, arr) &*& a[i] |-> get(arr, i) &*& array_model(a, i+1, e, arr);
{ assume(false); }

lemma void array_model_set_fold(int* a, int b, int e, array(int,int) arr, int i)
  requires array_model(a, b, i, arr) &*& a[i] |-> ?v &*& array_model(a, i+1, e, arr) &*& b <= i &*& i < e;
  ensures array_model(a, b, e, set(arr, i, v));
{ assume(false); }


// This is a consequence of array_model_set_fold if we have extensionality
lemma void array_model_get_fold(int* a, int b, int e, array(int,int) arr, int i)
  requires array_model(a, b, i, arr) &*& a[i] |-> get(arr, i) &*& array_model(a, i+1, e, arr) &*& b <= i &*& i < e;
  ensures array_model(a, b, e, arr);
{  if (arr != set(arr, i, get(arr, i))) {
    	int j = array_ext(arr, set(arr, i, get(arr, i)));
    	assert get(arr, j) != get(set(arr, i, get(arr, i)), j);
    	get_set(arr, i, get(arr, i), j);
    	assert false;
    } else {
    	array_model_set_fold(a, b, e, arr, i);
    }
}


lemma void array_model_out_of_range(int* a, int b, int e, array(int,int) arr, int i, int v)
  requires (i < b || i >= e) &*& array_model(a, b, e, arr);
  ensures array_model(a, b, e, set(arr, i, v));
{ assume(false); }


     

/*inductive ensemble = set_intro (fixpoint(ensemble,int));
inductive ensemble'''<t> = set_intro''' (fixpoint(t,int));
inductive ensemble'<t> = set_intro' (array(int,t));
inductive ensemble''<t> = set_intro'' (array(t,t));
*/



#endif
