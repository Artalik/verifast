#ifndef VFARRAY_H
#define VFARRAY_H

#include "intdiff.gh"

/*
   Axiomatic theory of arrays.

   The theory of arrays provides a built-in type array(t, u) of possibly infinite arrays indexed by t and ranging over u.
   The primitive functions are: select, store, constant_array, and array_ext.

   When using Z3, these functions are directly mapped to their conterpart in Z3.
*/

fixpoint u select<t,u> (array(t,u) arr, t x);
fixpoint array(t, u) store<t, u> (array(t, u) arr, t x, u y);
fixpoint array(t, u) constant_array<t,u> (u v);
fixpoint t array_ext<t, u> (array(t, u) a, array(t, u) b);

lemma void constant_select<t,u> (u v, t i)
  requires true;
  ensures select (constant_array<t,u>(v), i) == v;
{}

lemma void select_store<t,u> (array(t,u) arr, t x, u y, t z)
    requires true;
    ensures select (store(arr, x, y), z) == ((x == z) ? y : select (arr, z));
{}

lemma void array_extensionality<t, u>(array(t, u) a, array(t, u) b)
requires select(a, array_ext<t, u>(a, b)) == select(b, array_ext<t, u>(a, b));
ensures a == b;
{assume(false);}

fixpoint bool same_array<a> (array(int, a) arr1, array(int, a) arr2, int b, nat n) {
  switch(n) {
    case zero: return true;
    case succ(pred): return select(arr1, b) == select(arr2, b) && same_array(arr1, arr2, b+1, pred);
  }
}

predicate array_model (int* a, int b, int e, array(int,int) arr) =
  (b >= e) ? true : (integer(a+b,?v) &*& select(arr, b) == v &*& array_model(a, b+1, e, arr));

lemma void empty_array(int* a, int i, array(int, int) arr)
requires true;
ensures array_model(a, i, i, arr);
{
  close array_model(a, i, i, arr);
}

lemma void array_model_out_of_range_diff(int* a, int b, int e, array(int,int) arr, int i, int v, nat n)
  requires (i < b || i >= e) &*& array_model(a, b, e, arr) &*& int_diff(b, e, n) == true;
  ensures array_model(a, b, e, store(arr, i, v));
{ switch (n) {
    case zero : {
      open array_model(a, b, e, arr);
      close array_model(a, b, e, store(arr, i, v));
    }
    case succ(p) : {
      open array_model(a, b, e, arr);
      array_model_out_of_range_diff(a, b+1, e, arr, i, v, p);
      close array_model(a, b, e, store(arr, i, v));
    }
  }
}

lemma void array_model_out_of_range(int* a, int b, int e, array(int,int) arr, int i, int v)
  requires (i < b || i >= e) &*& array_model(a, b, e, arr) &*& b <= e;
  ensures array_model(a, b, e, store(arr, i, v));
{
  nat n = int_diff_make(b, e);
  array_model_out_of_range_diff(a, b, e, arr, i, v, n);
}

lemma void close_array_model_right(nat n)
requires array_model(?a, ?b, ?e, ?arr) &*& b <= e &*& int_diff(b, e, n) == true &*& a[e] |-> select(arr, e);
ensures array_model(a, b, e+1, arr);
{
  switch(n) {
    case zero: {
      open array_model(a, b, e, arr);
      assert (b == e);
      close array_model(a, e+1, e+1, arr);
      close array_model(a, b, e+1, arr);
    }
    case succ(p): {
      open array_model(a, b, e, arr);
      close_array_model_right(p);
      close array_model(a, b, e+1, arr);
    }
  }
}

lemma void open_array_model_right(int* a, int b, int e, array(int, int) arr, nat n)
requires array_model(a, b, e+1, arr) &*& b <= e &*& int_diff(b, e, n) == true;
ensures array_model(a, b, e, arr) &*& a[e] |-> select(arr, e);
{
  switch(n) {
    case zero: {
      open array_model(a, b, e+1, arr);
      open array_model(a, b+1, e+1, arr);
      close array_model(a, b, e, arr);
    }
    case succ(p): {
      open array_model(a, b, e+1, arr);
      open_array_model_right(a, b+1, e, arr, p);
      close array_model(a, b, e, arr);
    }
  }
}

lemma void array_model_init_diff(int* a, int length, nat n)
requires ints((void*)a, length, _) &*& length >= 0 &*& int_diff(0, length, n) == true;
ensures array_model(a, 0, length, _);
{
   switch (n) {
     case zero: {
     	empty_array(a,0,constant_array<int,int>(0));
     }
     case succ(p): {
     	open_ints_right(p);
     	int_diff_translate(1,length,-1,p);
     	array_model_init_diff(a,length-1,p);
     	assert a[length-1] |-> ?v;
     	assert array_model(a, 0, length-1, ?arr);
        array_model_out_of_range(a, 0, length-1, arr, length-1, v);
     	close_array_model_right(p);
     	int_diff_translate(0,length-1,1,p);
     }
  }
}

lemma void array_model_init(int* a, int length)
requires ints((void*)a, length, _) &*& length >= 0;
ensures array_model(a, 0, length, _);
{
  int_diff_nat_of_int(0, length);
  array_model_init_diff(a, length, nat_of_int(length));
}

lemma void array_model_delete(int* a, int length, nat len)
requires array_model(a, 0, length, ?arr) &*& length >= 0 &*& int_diff(0, length, len) == true;
ensures ints((void*)a, length, _);
{
   switch(len) {
     case zero: {
       open array_model(a, 0, length, arr);
       close ints((void*)a, 0, nil);
     }
     case succ(p): {
       int_diff_translate(1, length, -1, p);
       open_array_model_right(a, 0, length-1, arr, p);
       array_model_delete(a, length-1, p);
       close_ints_right(p);
     }
   }
}

lemma void array_model_select_unfold_diff(int* a, int b, int e, array(int,int) arr, int i, nat n)
requires array_model(a, b, e, arr) &*& b <= i &*& i < e &*& int_diff(b, i+1, n) == true;
ensures array_model(a, b, i, arr) &*& a[i] |-> select(arr, i) &*& array_model(a, i+1, e, arr);
{
  switch (n) {
    case zero : {
       open int_diff(b,i+1,n);
    }
    case succ(p) : {
      open array_model(a, b, e, arr);
      if (b+1 <= i) {
        array_model_select_unfold_diff(a, b+1, e, arr, i, p);
      }
      close array_model(a, b, i, arr);
    }
  }
}

lemma void array_model_select_unfold(int* a, int b, int e, array(int,int) arr, int i)
requires array_model(a, b, e, arr) &*& b <= i &*& i < e;
ensures array_model(a, b, i, arr) &*& a[i] |-> select(arr, i) &*& array_model(a, i+1, e, arr);
{
  int_diff_nat_of_int(b, i+1);
  array_model_select_unfold_diff(a, b, e, arr, i, nat_of_int(i+1-b));
}

lemma void array_model_store_fold_diff(int* a, int b, int e, array(int,int) arr, int i, nat n)
requires array_model(a, b, i, arr) &*& a[i] |-> ?v &*& array_model(a, i+1, e, arr) &*& b <= i &*& i < e &*& int_diff(b, i+1, n) == true;
ensures array_model(a, b, e, store(arr, i, v));
{
  switch (n) {
    case zero : {}
    case succ(p) : {
      open array_model(a, b, i, arr);
      if (b < i){
        array_model_store_fold_diff(a, b+1, e, arr, i, p);
        close array_model(a, b, e, store(arr, i, v));
      }else{
        array_model_out_of_range(a, b+1, e, arr, i, v);
        close array_model(a, b, e, store(arr, i, v));
      }
    }
  }
}

lemma void array_model_store_fold(int* a, int b, int e, array(int,int) arr, int i)
requires array_model(a, b, i, arr) &*& a[i] |-> ?v &*& array_model(a, i+1, e, arr) &*& b <= i &*& i < e;
ensures array_model(a, b, e, store(arr, i, v));
{
  int_diff_nat_of_int(b, i+1);
  array_model_store_fold_diff(a, b, e, arr, i, nat_of_int(i+1-b));
}

lemma void array_model_select_fold(int* a, int b, int e, array(int,int) arr, int i)
requires array_model(a, b, i, arr) &*& a[i] |-> select(arr, i) &*& array_model(a, i+1, e, arr) &*& b <= i &*& i < e;
ensures array_model(a, b, e, arr);
{
   array_model_store_fold(a, b, e, arr, i);
}


fixpoint bool array_forall<a>(array(int, a) arr, fixpoint(a, bool) p, int b, nat n) {
  switch(n) {
    case zero: return true;
    case succ(pred): return (p(select(arr, b)) && array_forall(arr, p, b+1, pred));
  }
}

lemma void array_forall_store<a> (array(int, a) arr, fixpoint(a, bool) p, int b, nat n, int i, a v)
requires array_forall(arr, p, b, n) == true;
ensures array_forall(store(arr, i, v), p, b, n) == (i < b ? true : i >= b + int_of_nat(n) ? true : p(v));
{
  switch(n) {
    case zero:
    case succ(pred): array_forall_store(arr, p, b+1, pred, i, v);
  }
}

lemma void array_forall_close_right<a> (array(int, a) arr, fixpoint(a, bool) p, int b, int e, nat n)
requires array_forall(arr, p, b, n) == true &*& p(select(arr, e)) == true &*& b <= e &*& int_diff(b, e, n) == true;
ensures array_forall(arr, p, b, succ(n)) == true;
{
  switch(n) {
    case zero:
    case succ(pred): array_forall_close_right(arr, p, b+1, e, pred);
  }

}

lemma void array_forall_in<a>(array(int, a) arr, fixpoint(a, bool) p, int b, int e, nat n, int i)
requires array_forall(arr, p, b, n) == true &*& b <= i &*& i < e &*& int_diff(b, e, n) == true;
ensures p(select(arr, i)) == true;
{
  switch(n) {
    case zero: assert false;
    case succ(pred): {
      if (b != i) array_forall_in(arr, p, b+1, e, pred, i);
    }
  }
}
lemma void same_array_refl<a>(array(int, a) arr, int b, nat n)
requires true;
ensures same_array(arr, arr, b, n) == true;
{
  switch(n) {
    case zero:
    case succ(pred): same_array_refl(arr, b+1, pred);
  }
}

lemma void same_array_sym<a>(array(int, a) arr1, array(int, a) arr2, int b, nat n)
requires same_array(arr1, arr2, b, n) == true;
ensures same_array(arr2, arr1, b, n) == true;
{
  switch(n) {
    case zero:
    case succ(pred): same_array_sym(arr1, arr2, b+1, pred);
  }
}

lemma void same_array_trans<a>(array(int, a) arr1, array(int, a) arr2, array(int, a) arr3, int b, nat n)
requires same_array(arr1, arr2, b, n) == true &*& same_array(arr2, arr3, b, n) == true;
ensures same_array(arr1, arr3, b, n) == true;
{
  switch(n) {
    case zero:
    case succ(pred): same_array_trans(arr1, arr2, arr3, b+1, pred);
  }
}

lemma void same_array_out<a>(array(int, a) arr, int b, int e, nat n, int i, a v)
requires int_diff(b, e, n) == true &*& b <= e &*& (i < b || e <= i);
ensures same_array(arr, store(arr, i, v), b, n) == true;
{
  switch(n) {
    case zero:
    case succ(pred): same_array_out(arr, b+1, e, pred, i, v);
  }
}

lemma array(int, int) array_model_concat(int* a, array(int, int) arr1, array(int, int) arr2, int b, nat n, int p, int e)
requires array_model(a, b, p, arr1) &*& array_model(a, p, e, arr2) &*& int_diff(b, p, n) == true &*& b <= p &*& p <= e;
ensures array_model(a, b, e, result) &*& same_array(arr1, result, b, n) == true &*& same_array(arr2, result, p, nat_of_int(e-p)) == true;
{
  switch(n) {
    case zero: {
      open array_model(a, b, p, arr1);
      same_array_refl(arr2, p, nat_of_int(e-p));
      return arr2;
    }
    case succ(pred): {
      open array_model(a, b, p, arr1);
      array(int, int) arr = array_model_concat(a, arr1, arr2, b+1, pred, p, e);
      array(int, int) res = store(arr, b, select(arr1, b));
      array_model_out_of_range(a, b+1, e, arr, b, select(arr1, b));
      close array_model(a, b, e, res);
      int_diff_nat_of_int(b+1, p);
      same_array_out(arr, b+1, p, pred, b, select(arr1, b));
      same_array_trans(arr1, arr, res, b+1, pred);
      int_diff_nat_of_int(p, e);
      same_array_out(arr, p, e, nat_of_int(e-p), b, select(arr1, b));
      same_array_trans(arr2, arr, res, p, nat_of_int(e-p));
      return res;
    }
  }
}

#endif
